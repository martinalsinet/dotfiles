#+title: Configuración de Emacs
#+author: Martín Alsinet
#+date: 2017
#+options: toc:nil ':t num:nil
#+language: es

* Motivación

  Una vez que uno decide utilizar *emacs* como editor de texto, una de las cosas que debe hacer es personalizar el editor según sus preferencias. Para ello es necesario editar el archivo *~/.emacs* y entonces comienzan los problemas. Se van a encontrar con miles y miles de ejemplos de este archivo de configuración, con miles de configuraciones y comandos diferentes; y se hace extremadamente tedioso entender y aprender cuáles son las que nos van a servir o las que nos convendría utilizar.
  
  Un problema muy común con el archivo .emacs es que rápidamente se va saliendo de control y al cabo de un tiempo ya no se sabe qué hace cada parte. Luego empieza a aparecer una especie de miedo supersticioso a modificar las preferencias, que se traduce en una tendencia a mantener bloques que uno ya se olvidó qué es lo que hacen pero que siguen conservando "para no romper lo que me está funcionando".
  
  Cada vez que intenté utilizar emacs como mi editor principal tuve este problema, y era un motivo importante de mi frustración con el uso del editor. Por suerte hubo gente que lo solucionó de una manera muy elegante y que permite realizar lo que Donald Knuth denominó "Literate Programming", es decir, un programa que en realidad es documentación ejecutable, que se lee como un documento para que los seres humanos lo puedan entender y que al mismo tiempo es código fuente para que la máquina (emacs) lo pueda ejecutar.
  
  Básicamente la solución consiste en utilizar *org-mode*, que es un modo mayor de emacs para escribir documentos y listas de tareas, y que permite incorporar (y ejecutar) bloques de código dentro de un documento. La ventaja principal que tiene este modo es que se puede visualizar el documento de manera jerárquica, con nodos y subnodos que se pueden ir abriendo y ocultando según se requiera.
  
  Si abrieran con emacs este archivo, que tiene todas mis preferencias de configuración, van a ver un listado similar al siguiente:
 
#+BEGIN_SRC text
- Motivación
- Información Personal
- Repositorios de Paquetes
- Backups e Historial
- Apariencia
- Edición de Texto
- Movimiento del Cursor
- Teclado
- Paquetes Varios
#+END_SRC
  
  Cada uno de los títulos del documento es una sección que se puede abrir con la tecla TAB (y cerrarla con Shift-TAB) para examinarla en detalle, donde se van agregando ítems y sub-ítems que contienen los diferentes bloques de código para configurar las diversas funcionalidades del editor de acuerdo a mis preferencias.
  
  En el archivo *~/.emacs* ahora lo único que me queda es una llamada a la función *org-babel-load-file* que lo que hace es cargar el archivo *configuration.org* y ejecutarlo cada vez que se inicia el editor.
  
  De esta manera, me queda un documento que me explica en detalle qué hace cada una de las opciones y que está ordenado, que es fácil de navegar y sobre todo de modificar. Ahora puedo entender qué hace cada opción, porque explico en detalle en cada sección y en cada ítem qué es lo que hace el bloque de código correspondiente. Y si existe una opción que ya no tiene sentido o que he dejado de utilizar, puedo cambiarla o incluso borrarla sin miedo a afectar el comportamiento general del editor.
  
** Links que usé como inspiración

- https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
- https://www.masteringemacs.org/article/my-emacs-keybindings
- https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool
- http://pages.sachachua.com/.emacs.d/Sacha.html#orgc27e81e
- https://github.com/bbatsov/emacs.d/blob/master/init.el
- https://www.philnewton.net/guides/emacs-as-a-php-editor/
- https://github.com/bbatsov/prelude

** TODO Estudiar configs para sacar ideas

- https://github.com/bzg/dotemacs/blob/master/emacs.org
- https://github.com/bbatsov/emacs.d/blob/master/init.el
- http://pages.sachachua.com/.emacs.d/Sacha.html#orgc27e81e
- https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org
- https://github.com/EnigmaCurry/emacs/blob/master/config.org
- https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org

* Información Personal

  En esta sección se registra el nombre y el email del usuario en dos variables globales a las que luego se puede hacer referencia desde diferentes scripts.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Martín Alsinet"
      user-mail-address "martin@alsinet")
#+END_SRC

* Repositorios de Paquetes

  Esta sección configura las fuentes de paquetes que utiliza el editor. Se agrega el repositorio de MELPA (melpa.org) al listado de paquetes por defecto (elpa.gnu.org). Además se instala el paquete *use-package* (si aún no ha sido instalado) que simplifica la carga y el uso de paquetes en el resto del archivo de configuración.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives 
               '("gnu" . "http://elpa.gnu.org/packages/")))

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

#+RESULTS:

* Backups e Historial
** Backups

- Establece la carpeta para guardar los backups
- Activa el borrado de versiones viejas
- Desactiva el control de versiones
- Desactiva el backup de los archivos bajo control de versiones
- Desactiva el guardado automático 

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions t)
(setq version-control nil)
(setq vc-make-backup-files nil)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Historial

#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode t)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC
  
* Environment & Shells

Cuando se utiliza emacs en modo gráfico hay algunas variables del entorno que no están disponibles de la misma manera que cuando se usa desde la terminal.

** GPG

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq epa-pinentry-mode 'loopback))
#+END_SRC

** Cut & Paste

Cuando se utiliza en modo terminal hay que conectar las funciones de cortar y pegar de Emacs con el clipboard de Mac OS X.

#+begin_src elisp
(unless (display-graphic-p)
  (defun copy-from-osx ()
    "Handle copy/paste intelligently on OS X"
    (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
      (if (and (eq system-type 'darwin)
               (file-exists-p pbpaste))
          (let ((tramp-mode nil)
                (default-directory "~"))
            (shell-command-to-string pbpaste)))))
  (defun paste-to-osx (text &optional push)
    "Handle copy/paste intelligently on OS X"
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))
  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx))
#+end_src

** Tramp

Con TRAMP se puede acceder a cualquier archivo en servidores remotos de manera transparente, como si estuviera en la máquina local. Emacs se baja por ssh el archivo a un buffer local y cada vez que uno hace cambios y lo guarda, sube los cambios al servidor remoto automáticamente.

#+begin_src elisp
(setq tramp-default-method "ssh")
(customize-set-variable 'tramp-syntax 'simplified)
#+end_src

** eshell

#+begin_src elisp
(setq eshell-prompt-function
     (lambda ()
       (concat
        (propertize "\n┌─[" 'face `(:foreground "green"))
        (propertize (concat (file-name-base (eshell/pwd))) 'face `(:foreground "white"))
        (propertize "@" 'face `(:foreground "green"))
        (if (magit-get-current-branch)
            (propertize (magit-get-current-branch) 'face `(:foreground "yellow"))
            (propertize "z" 'face `(:foreground "yellow")))
        (propertize "]──[" 'face `(:foreground "green"))
        (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
        (propertize "]\n" 'face `(:foreground "green"))
        (propertize "└─>" 'face `(:foreground "green"))
        (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green"))
        )))

(setenv "TERM" "xterm-256color")
#+end_src

** Desactivar Ctrl+Z

https://www.fettesps.com/emacs-disable-suspend-button/

#+begin_src elisp
;; Unbind Pesky Sleep Button
(global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])
#+end_src

* Apariencia

  En esta sección puse las preferencias que tienen que ver con el aspecto visual del editor. Ya sea que use Emacs desde una consola o desde el modo gráfico nativo, me manejo para todo con el teclado, entonces no necesito ocupar espacio de la pantalla con barras de menú o herramientas, y además desactivo todos los sonidos y el parpadeo del cursor porque me parecen extremadamente molestos.
  
** Desactivar ventanas y menús

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)

;; When not running in terminal disable scroll bars
(when (display-graphic-p)
  (scroll-bar-mode -1))
#+END_SRC

** Desactivar sonidos

#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
(setq ring-bell-function 'ignore)
#+END_SRC

** Desactivar cursor blinking

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Tamaño de fuente

Cuando uso Emacs desde la consola puedo controlar el tamaño de fuente con el teclado (= <Cmd> + =), mientras que si uso el Emacs en modo gráfico es necesario configurar la fuente en 14pt para que no quede demasiado pequeña. 

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (set-face-attribute 'default nil :height 140))
#+END_SRC

** Themes

  Como conjunto de colores utilizo el *zenburn-theme*, que es conjunto de colores obscuro (letras en blanco y en color sobre un fondo negro) que cansa menos la vista que el conjunto por defecto (letras en negro y en color sobre un fondo blanco). Adicionalmente instalé dos conjuntos de colores claros (github y leuven).

*** Themes disponibles

- [[https://emacsthemes.com/themes/zenburn-theme.html][zenburn]] (default, dark)
- [[https://emacsthemes.com/themes/github-theme.html][github]] (light)
- [[https://emacsthemes.com/themes/leuven-theme.html][leuven]] (light)

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme :ensure t)
(use-package github-theme :ensure t)
(use-package leuven-theme :ensure t)
#+END_SRC

*** Switch theme

Agrego una función para cambiar de theme desactivando todo lo que haya sido modificado por un theme anterior. Esto se debe a que a veces los themes no configuran exactamente el mismo conjunto de preferencias y eso causa que, al cambiar de theme sin resetear las preferencias, queden partes configuradas de un theme anterior.

[[https://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme][How to reset color theme?]]

#+BEGIN_QUOTE
Are you sure that you are using *color themes* and not Emacs *custom themes*? Color themes are defined by library color-theme.el. Custom themes are available starting with Emacs 24 - and they are not the same as color themes.

- If you are using color themes then the answer is simple: just enable the pseudo color-theme named [Reset]. That completely undoes the theme: removes all effects that it imposed.

- If you are in fact using Emacs custom themes then the answer is not so simple. You cannot undo the application of a custom theme. What you can do, which will help a lot, is to disable each custom theme, using disable-theme, after it has been enabled and before enabling another custom theme.
#+END_QUOTE

Switch Theme ([[https://www.reddit.com/r/emacs/comments/30b67j/how_can_you_reset_emacs_to_the_default_theme/][source]])

#+BEGIN_SRC emacs-lisp
(defun switch-theme (theme)
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapcar 'symbol-name
                                     (custom-available-themes))))))
  (mapcar #'disable-theme custom-enabled-themes)
  (load-theme theme t))
#+END_SRC

*** Activar el default theme

#+BEGIN_SRC emacs-lisp
(switch-theme 'leuven)
(switch-theme 'zenburn)
#+END_SRC

* Edición de Texto
** Indentación con espacios

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil) 
#+END_SRC

** Visual line mode

   Para los archivos de texto activo el modo *visual-line-mode* que hace que el texto se acomode a la pantalla sin cortar las palabras cuando la línea excede el ancho máximo de la pantalla, enviando la última palabra al siguiente renglón.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** Unfill paragraph

   En esta sección se definen dos funciones que permiten transformar un párrafo (o una región) con saltos de línea (p.ej. en la columna 80) en un párrafo de una única línea de texto. Realizan la acción inversa de *fill-paragraph* y *fill-region*, y por lo tanto llevan los nombres de *unfill-paragraph* y *unfill-region*.

#+BEGIN_SRC emacs-lisp

;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)

(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

;; Handy key definition
(define-key global-map "\C-\M-Q" 'unfill-region)

#+END_SRC

** Mostrar los números de línea y de columna

#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+END_SRC

* Lenguajes de Programación
** Web Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.twig\\.html\\'" . web-mode)
         ("\\.blade\\.php\\'" . web-mode)
         ("\\.html?\\'" . web-mode))
  :config (progn 
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-css-indent-offset 2)))
#+END_SRC

** HTML
*** Htmlize

Convierte un buffer a HTML - [[https://github.com/hniksic/emacs-htmlize][Github]]

Org-mode usa HTMLIZE para exportar a HTML.

#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC

*** Emmet Mode

Produce HTML usando sintaxis abreviada basada en selectores CSS - [[https://github.com/smihica/emmet-mode][Github]]

Ejemplo: Ingresando la siguiente abreviación =ul>li.item$*3= y luego presionando =C-j= se genera el un UL con tres LI de clase "itemX"

#+BEGIN_SRC text
<ul>
   <li class="item1"></li>
   <li class="item2"></li>
   <li class="item3"></li>
</ul>
#+END_SRC text

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode 
   :ensure t
   :init
   (progn 
     ;; Auto-start on any markup modes
     (add-hook 'sgml-mode-hook 'emmet-mode)
     ;; enable Emmet's css abbreviation.
     (add-hook 'css-mode-hook  'emmet-mode)))
#+END_SRC

Opciones Disponibles:

#+BEGIN_SRC emacs-lisp :eval never
;By default, inserted markup will be indented with indent-region, according to the buffer's mode. To disable this, do:
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))

;If you disable indent-region, you can set the default indent level thusly:
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.

;If you want the cursor to be positioned between first empty quotes after expanding:
(setq emmet-move-cursor-between-quotes t) ;; default nil

;Or if you don't want to move cursor after expanding:
(setq emmet-move-cursor-after-expanding nil) ;; default t

;If you want to use emmet with react-js's JSX, you probably want emmet to expand 'className="..."' instead of 'class="..."':
(setq emmet-expand-jsx-className? t) ;; default nil

#+END_SRC

*** TODO Rainbow mode

#+BEGIN_SRC emacs-lisp
;(use-package rainbow-mode
;  :ensure t
;  :config
;  ;(add-hook 'html-mode-hook 'rainbow-mode)
;  (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC

** JS2 Mode

Improved Javascript Mode - [[https://github.com/mooz/js2-mode][Github]]

#+BEGIN_SRC emacs-lisp
(use-package js2-mode 
  :mode (("\\.js\\'" . web-mode))
  :ensure t)
#+END_SRC

*** TODO Settings disponibles

https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-javascript.el

** PrettierJS

PrettierJS for Emacs - [[https://github.com/prettier/prettier-emacs][Github]]

Para poder utilizar [[https://prettier.io/][prettierjs]] desde Emacs es necesario tener instalado el comando =prettier=. Teniendo nodejs instalado, es solamente cuestión de ejecutar =npm install --global prettier=. Hay que instalarlo globalmente si queremos poder ejecutar el comando prettier desde cualquier proyecto o archivo javascript. En Mac OS X se puede instalar con homebrew, con =brew install prettier=

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :init  (add-hook 'js2-mode-hook 'prettier-js-mode)
  :ensure t)
#+END_SRC

*** TODO Settings disponibles

https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-javascript.el

** PHP Mode

#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t
  :mode (("\\.php\\'" . php-mode)))
#+END_SRC

*** TODO agregar flymake y phplint

- http://enigmacurry.com/2011/07/01/php-code-compliance-in-emacs/

** Python Mode

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
      (lambda ()
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (setq python-indent 4)
        (setq python-indent-offset 4)))
#+END_SRC

** autopep8

Para poder utilizar =py-autopep8= desde Emacs, obviamente hay que tener instalado el comando =autopep8= usando =pip install autopep8=.

#+begin_src emacs-lisp
(use-package py-autopep8 :ensure t)
#+end_src

** Expand region

Selección inteligente de bloques de acuerdo al formato del código - [[https://github.com/magnars/expand-region.el][Github]] - [[http://emacsrocks.com/e09.html][YouTube]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region 
  :ensure t
  :bind (("M-=" . er/expand-region)))
#+END_SRC

** Live Coding
*** Simple-Httpd

Emacs web server - [[https://github.com/skeeto/emacs-web-server][Github]]

#+BEGIN_QUOTE
Once loaded, there are only two interactive functions to worry about: =httpd-start= and =httpd-stop=. Files are served from =httpd-root= (can be changed at any time) on port =httpd-port=. Directory listings are enabled by default but can be disabled by setting =httpd-listings= to nil.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package simple-httpd :ensure t)
#+END_SRC

*** Impatient Mode

Live coding HTML - [[https://github.com/skeeto/impatient-mode][Github]] - [[http://youtu.be/QV6XVyXjBO8][YouTube example]]

#+BEGIN_QUOTE
Enable the web server provided by simple-httpd (=M-x httpd-start=).

Publish buffers by enabling the minor mode impatient mode (=M-x impatient-mode=).

And then point your browser to http://localhost:8080/imp/, select a buffer, and watch your changes appear as you type!

If you are editing HTML that references resources in other files (like CSS) you can enable impatient-mode on those buffers as well. This will cause your browser to live refresh the page when you edit a referenced resource.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package impatient-mode :ensure t)
#+END_SRC

*** Skewer Mode

Live Coding HTML - [[https://github.com/skeeto/skewer-mode][Github]] - [[http://youtu.be/4tyTgyzUJqM][YouTube]]

#+BEGIN_QUOTE
Provides live interaction with JavaScript, CSS, and HTML in a web browser. Expressions are sent on-the-fly from an editing buffer to be evaluated in the browser, just like Emacs does with an inferior Lisp process in Lisp modes.

The keybindings for evaluating expressions in the browser are just like the Lisp modes. These are provided by the minor mode =skewer-mode=.

- =C-x C-e= :: Evaluate the form before the point and display the result in the minibuffer. If given a prefix argument, insert the result into the current buffer.
- =C-M-x=   :: Evaluate the top-level form around the point.
- =C-c C-k= :: Load the current buffer.
- =C-c C-z= :: Select the REPL buffer.

#+END_QUOTE

#+BEGIN_SRC emacs-lisp :eval never
(use-package skewer-mode 
  :ensure t
  :init (skewer-setup))
#+END_SRC

** TODO Clojure
*** CIDER

https://github.com/clojure-emacs/cider

http://cider.readthedocs.io/en/latest/

#+BEGIN_SRC emacs-lisp :eval never
(use-package cider :disabled :ensure t)
#+END_SRC

*** clojure-mode

https://github.com/clojure-emacs/clojure-mode

#+BEGIN_SRC emacs-lisp :eval never
(use-package clojure-mode :disabled :ensure t)
#+END_SRC

*** parinfer

https://github.com/DogLooksGood/parinfer-mode

#+BEGIN_SRC emacs-lisp :eval never
(use-package parinfer
  :disabled
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

** Scheme

#+BEGIN_SRC emacs-lisp
(use-package geiser 
  :ensure t
  :config (progn 
            (add-hook 'scheme-mode-hook 'geiser-mode)
            (setq geiser-scheme-implementation 'mit)))
#+END_SRC

** Apache Mode

Muestra los archivos de configuración de apache (httpd.conf, .htaccess) con la sintaxis en colores

#+BEGIN_SRC emacs-lisp
(use-package apache-mode :ensure t)
#+END_SRC

* Movimiento del Cursor
** Scroll: Preservar la posición del cursor

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 1)
#+END_SRC

** Scroll: Mover la ventana de a una línea

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
(global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+END_SRC

** Scroll: Tres líneas de margen

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 3)
#+END_SRC

** Scroll: Desactivar scroll-to-bottom en M-x shell

#+BEGIN_SRC emacs-lisp
;; Don't scroll to bottom for shell output
(setq comint-scroll-show-maximum-output nil)
#+END_SRC
   
** Scroll: Desactivar scroll-to-bottom en eshell

#+BEGIN_SRC emacs-lisp
;; Don't scroll to bottom for shell output
(setq eshell-scroll-show-maximum-output nil)
#+END_SRC

** Goto: Beginning of the line

#+BEGIN_SRC emacs-lisp

(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)

#+END_SRC

* Teclado
** Confirmar con y-n (en vez de yes-no)

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Shortcut: Kill this buffer

   Esta opción hace que el shortcut (ctrl-x k), que generalmente está asociado a *kill-buffer*, sea reemplazado por *kill-this-buffer*, que cierra el buffer actual sin necesidad de pedir una confirmación.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC

** Shortcut: Switch window

   Esta opcion agrega el shortcut (ctrl-o) para cambiar a la otra ventana, función que por defecto tiene un shortcut más complejo (ctrl-x o).

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-o") 'other-window)
#+END_SRC

** Alternativa para Meta-X

   Estoy probando [[https://termux.com/][Termux]], que es una aplicación que permite instalar emacs en Android. En el teclado bluetooth que uso no me funciona la tecla Alt, así que necesito una alternativa para M-x. En [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]], Steve Yegge recomienda usar =C-x C-m=, y esa combinación es la que voy a usar.

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'smex)
#+END_SRC

** Backward-kill-word

Otro consejo que saqué de [[https://sites.google.com/site/steveyegge2/effective-emacs][Effective Emacs]]. Ya me había pasado muy frecuentemente que apretaba =C-w= sin querer y me borraba todo el párrafo. Ahora la tecla =C-w= va a borrar la última palabra que escribí, y para borrar el párrafo (=kill-region=) deberé apretar =C-c C-k=.

#+BEGIN_SRC emacs-lisp
;(global-set-key "\C-w" 'backward-kill-word)
;(global-set-key "\C-x\C-k" 'kill-region)
;(global-set-key "\C-c\C-k" 'kill-region)
#+END_SRC

** Insertar ß

Configuro el atajo =Alt-s= para que inserte el caracter alemán ß. Cuando uso emacs desde la consola aparentemente no es necesario, pero sí cuando estoy en el modo gráfico.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (defun my/insert-ss () (interactive) (insert "ß"))
  (global-set-key (kbd "M-s") 'my/insert-ss))
#+END_SRC

* Org-Mode
** Org-tempo

A partir de la versión 9.2 se desactivaron los atajos (<s, <a, etc) para crear bloques de código. En su lugar es necesario activar el módulo *org-tempo*.

#+begin_src emacs-lisp
(when (version< "9.1" org-version)
  (require 'org-tempo))
#+end_src

** Org-indent-mode

Este modo mejora la legibilidad para documentos con muchos ítems, indentando los bloques a medida que se va entrando en la jerarquía del documento.

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented nil)
#+END_SRC

** Presentaciones
*** TODO Evaluar org-present vs org-tree-slide
*** Org-present (deprecado?)

Ultra-minimalist presentation minor-mode for Emacs org-mode - [[https://github.com/rlister/org-present][Github]]

#+BEGIN_SRC emacs-lisp
(use-package org-present :ensure t)
#+END_SRC

*** Org-tree-slide:

The main purpose of this elisp is to handle each tree in an org buffer as a slide by simple narrowing. This emacs lisp is a minor mode for Emacs Org-mode. - [[https://github.com/takaxp/org-tree-slide][Github]]

#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide :ensure t)
#+END_SRC

#+RESULTS:

** TODO Configuración

Tengo que encontrar la manera de ocultar la mode-line cuando se inicia el modo org-present y mostrarla cuando se sale de la presentación.

Traté de usar los hooks pero me oculta la línea y después no la puedo volver a mostrar.

#+BEGIN_QUOTE
Precise behaviour of org-present during start and quit is controlled from hooks. The following will enlarge text, show images, hide the cursor and make the buffer read-only:
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :eval never
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+END_SRC

** Prettify Entities

Muestra las entidades de Org-Mode con sus respectivos caracteres Unicode. Por ejemplo, para \​le se muestra ≤.

Con =M-x org-entities-help= se puede consultar la tabla de entidades.

#+BEGIN_SRC emacs-lisp
(org-toggle-pretty-entities)
#+END_SRC

** Exportar a Markdown

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC

** TOC-Org

TOC-org es una utilidad que permite generar un índice del documento en una sección agregando el tag =TOC= con el comando =org-set-tags-command=. 

Yo lo utilizo para generar el índice de mis documentos en GitHub. Se agrega un hook para que cada vez que se guarda el documento se actualice el índice.

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :init  (add-hook 'org-mode-hook 'toc-org-mode)
  :ensure t)
#+END_SRC

* Org-Mode: Código fuente
** Sintaxis en colores
*** En el buffer

   Esta opción permite que los bloques de código en org-mode tengan syntax highlighting.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Al exportar a PDF

Utilizo el paquete =minted= para formatear los bloques de código fuente en el archivo pdf exportado. Esto requiere modificar el comando que usa org-mode para generar el pdf, agregando las opciones =-shell-escape= y =-interaction nonstopmode=.

Además configuro algunas opciones para formatear los bloques de código fuente de acuerdo a mis preferencias:

- tamaño de fuente pequeño (para que entren las líneas largas)
- margen izquierdo
- color de fondo
- mostrar números de línea

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-latex-minted-options 
      '(("fontsize" "\\scriptsize")
        ("xleftmargin" "\\parindent")
        ("bgcolor" "bg")
        ("linenos" "")))
#+END_SRC

**** Nota: Configurar el color de fondo y el estilo

Para configurar el color de fondo de los bloques de código fuente es necesario agregar al preámbulo del archivo org unas opciones para cargar el paquete =xcolor= y para definir el color de fondo (=bg=). 

Además se puede seleccionar el estilo del highlighting con el comando =\usemintedstyle{}=.

#+NAME: minted-color
#+BEGIN_SRC text
#+LaTeX_HEADER: \usemintedstyle{default}
#+LaTeX_HEADER: \usepackage{xcolor}
#+LaTeX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+END_SRC

Los estilos disponibles se pueden consultar con =pygmentize -L styles=

#+BEGIN_SRC sh :eval never
pygmentize -L styles
#+END_SRC

Defino una función para insertar los headers que me permiten configurar el color de fondo y los estilos del highlighting.

#+BEGIN_SRC emacs-lisp :eval never
(defun expand-named-babel-block (block)
    (save-excursion
    (org-babel-goto-named-src-block block)
    (org-babel-expand-src-block)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :eval never
(defun my/org-pdf-src-style () 
   "Insert latex source code preamble for org export"
   (interactive)
   (insert minted))
#+END_SRC

*** Al exportar a HTML
**** Themes
***** Readtheorg
#+NAME: readtheorg
#+BEGIN_SRC text :eval never
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <style type="text/css">pre {background-color: #ddd}</style>
#+END_SRC text

***** Bigblow
#+NAME: bigblow
#+BEGIN_SRC text :eval never
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <style type="text/css">pre {background-color: #ddd}</style>
#+END_SRC text

**** Insertar theme 

#+BEGIN_SRC emacs-lisp :var rto=readtheorg bb=bigblow
(defvar my/org-html-theme-readtheorg rto)
(defvar my/org-html-theme-bigblow bb)
(defun my/org-html-theme (theme) 
   "Insert html theme preamble for org export"
   (interactive
     (list
      (completing-read "Select theme (default readtheorg): " 
         '("readtheorg" "bigblow"))))
   (cond ((string= theme "") 
            (insert my/org-html-theme-readtheorg)
            (insert "\n"))
         ((string= theme "readtheorg") 
            (insert my/org-html-theme-readtheorg)
            (insert "\n"))
         ((string= theme "bigblow") 
            (insert my/org-html-theme-bigblow)
            (insert "\n"))
         ((message "Available themes: readtheorg, bigblow"))))
#+END_SRC

***** TODO Modificar la carga de themes para que use la directiva =+#SETUPFILE=

** Indentación

Este comando elimina toda intentación en el bloque de código luego de editarlo con =C-c C-'=. Por defecto, org-mode agrega 2 espacios en el margen izquierdo, lo que modifica la indentación correcta del lenguaje correspondiente.

#+BEGIN_SRC emacs-lisp
;;(setq org-edit-src-content-indentation 0)
;;(setq org-src-tab-acts-natively t)
;;(defun my/indent-org-src ()
;;  "Indent source code inside an org-src-block"
;;  (interactive)
;;  (save-excursion
;;    (org-edit-src-code)
;;    (mark-whole-buffer)
;;    (indent-for-tab-command)
;;    (org-edit-src-exit)))
#+END_SRC

** TODO Check Settings

source: https://github.com/EnigmaCurry/emacs/blob/master/config.org#org-babelsource-blocks

#+BEGIN_QUOTE
I like to have source blocks properly syntax highlighted and with the editing popup window staying within the same window so all the windows don’t jump around. Also, having the top and bottom trailing lines in the block is a waste of space, so we can remove them.

I noticed that fontification doesn’t work with markdown mode when the block is indented after editing it in the org src buffer—the leading #s for headers don’t get fontified properly because they appear as Org comments. Setting org-src-preserve-indentation makes things consistent as it doesn’t pad source blocks with leading spaces.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :eval never
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC

** Expand named block

#+BEGIN_QUOTE
Johan W. Klüwer <johan.w.kluwer@gmail.com>

Is there a way to assign the uninterpreted content of an executable source block to a variable? Preferably, using a :var header argument? That is, return the text in the block, not the result of evaluating it, and preferably with noweb references expanded.

"example" blocks return text the way I want, but they can't be evaluated, and of course noweb is ruled out for them.

The function org-babel-ref-resolve could to the job if there were a switch to block evaluation.


Why this is interesting: I wish to use url-hexify-string on the text of a named SPARQL query.

#+END_QUOTE

Ejemplo de uso

#+BEGIN_SRC text

BEGIN_SRC emacs-lisp :var qry=(expand-named-babel-block "qry-test-B")
(url-hexify-string qry)
END_SRC

#+END_SRC

#+BEGIN_SRC emacs-lisp :eval never
(defun my/expand-named-babel-block (block)
    (save-excursion
    (org-babel-goto-named-src-block block)
    (org-babel-expand-src-block)))
#+END_SRC

** Edición en otra ventana

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'other-window)
#+END_SRC

** Lenguajes de programación
*** ob-php

Hay dos paquetes diferentes que se llaman *ob-php* y cuyos URLs de GitHub son casi iguales:

1. https://github.com/stardiviner/ob-php (Es parte de org-mode desde febrero de 2018)

2. https://framagit.org/steckerhalter/ob-php

El primero tenía un bug que no permite ejecutar los bloques de código PHP y es necesario patchearlo para que funcione, y tampoco es que funciona del todo bien (ver https://github.com/stardiviner/ob-php/issues/1)

El segundo funciona bien, pero no está disponible en MELPA, así hay que instalarlo manualmente con el siguiente bloque:

#+BEGIN_SRC emacs-lisp
(unless (require 'ob-php nil 'noerror)
  (with-temp-buffer
    (url-insert-file-contents "https://framagit.org/steckerhalter/ob-php/raw/master/ob-php.el")
    (eval-buffer)))
(require 'ob-php)
#+END_SRC

Para cambiar el intérprete de PHP que usa org-mode es necesario configurar el nombre del comando en la variable =org-babel-php-command=.

#+BEGIN_SRC emacs-lisp :eval never
;(setq org-babel-php-command "php-5.6")
;(setq org-babel-php-command "php-7")
#+END_SRC

**** TODO revisar ob-php de steckerhalter para ver si funcionan las sesiones y los errores

*** org-babel languages

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
    'org-babel-load-languages
          '((scheme . t)
            (python . t)
            (php . t)
            (shell . t)
            (js . t)
            (sqlite . t)
            (sql . t)
            (java . t)
            (emacs-lisp . t))))

;; don't ask for confirmation to run code block
(setq org-confirm-babel-evaluate nil)
#+END_SRC

* Paquetes Varios
** Autocomplete: ido

   El paquete *ido* permite abrir archivos y elegir buffers tipeando solamente parte del nombre. El paquete *flx-ido* es una mejora en el matching para ido y el paquete *smex* implementa un autocomplete similar a ido para la búsqueda de funcionalidades dentro del editor (Meta-x).

Si bien lo usé bastante al principio, ahora lo estoy reemplazando por ivy, counsel y swiper.

#+BEGIN_SRC emacs-lisp :eval never
(use-package ido 
  :ensure t 
  :config (progn (ido-mode t) (ido-everywhere t)))
(use-package flx-ido 
  :ensure t 
  :config (flx-ido-mode t))
(use-package smex
  :ensure t
  :bind (("M-x" . smex))
  :config (smex-initialize))
#+END_SRC

** Autocomplete: ivy + counsel + swiper

*Tip*: cuando queremos crear un nuevo archivo pero su nombre hace que =counsel-find-file= encuentre otros resultados, hay que apretar =C-M-j=

#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map)
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  ;; (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; show matched/total count
  (setq ivy-count-format "(%d/%d) ")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; fuzzy search for everything except swiper
        '((swiper . ivy--regex-plus)
          (swiper-all . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))

(use-package counsel
  :ensure t
  :bind
  ("M-x" . counsel-M-x)
  ("C-c a" . counsel-ack))

(use-package swiper
  :ensure try
  :config
  (progn
    (global-set-key "\C-s" 'swiper)
    (global-set-key "\C-r" 'swiper)
    ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "C-c u") 'swiper-all)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-c a") 'counsel-ack)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ; Buscar mejores teclas para estas funciones
    ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;(global-set-key (kbd "C-x l") 'counsel-locate)
    ))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile 
  :ensure t
  :config
  (setq projectile-mode-line
        '(:eval (format " Projectile[%s(%s)]"
                        (projectile-project-name))))
  (projectile-global-mode)
  (setq projectile-require-project-root nil))
#+END_SRC

    ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "C-c u") 'swiper-all)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-c a") 'counsel-ack)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    ; Buscar mejores teclas para estas funciones
    ;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    ;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    ;(global-set-key (kbd "C-x l") 'counsel-locate)
    ))
#+END_SRC

** Magit

Modifico la tecla "q" para que destruya el buffer cuando lo cierro.

#+BEGIN_SRC emacs-lisp
(use-package magit 
  :ensure t
  :config (define-key magit-mode-map 
             (kbd "q") 
             (lambda() (interactive) (magit-mode-bury-buffer t))))
(use-package projectile :ensure t)
#+END_SRC

** Text modes (yaml, json, markdown, dockerfiles)

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
(use-package markdown-mode :ensure t)
(use-package markdown-toc :ensure t)
(use-package json-mode :ensure t)
(use-package dockerfile-mode :ensure t)
#+END_SRC

** Editor tools

- windresize :: Permite cambiar el tamaño de las ventanas utilizando las flechas del teclado

- mwe-log-commands :: Permite tener un buffer donde se van logueando todos los comandos que se ejecutan en el editor

- buffer-move :: Permite intercambiar los buffers del editor (izq<>der, arriba<>abajo)

#+BEGIN_SRC emacs-lisp
(use-package windresize :ensure t)
(use-package mwe-log-commands :ensure t)
(use-package buffer-move
  :ensure t
  :bind (("s-<left>" . buf-move-left)
         ("s-<right>" . buf-move-right)
         ("s-<up>" . buf-move-up)
         ("s-<down>" . buf-move-down)))
#+END_SRC

* TODO Paquetes para evaluar
** Ledger mode + Org mode

YouTube: Conquering Your Finances with Emacs and Ledger
https://www.youtube.com/watch?v=cjoCNRpLanY&t=1155s

** Newsfeeds & Email in gnus
** elscreen

- https://github.com/knu/elscreen
- https://github.com/wasamasa/eyebrowse

** Indium: Javascript debugger

https://github.com/NicolasPetton/Indium

** Company mode: Autocomplete para métodos

- Company mode: http://company-mode.github.io/
- PHP: https://github.com/arnested/php-extras
- JS: https://github.com/ScottyB/ac-js2
  
